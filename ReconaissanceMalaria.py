import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
import os
import random
import gdown

st.set_page_config(
    page_title="D√©tection de la Malaria",
    page_icon="ü¶ü",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Agrandir la sidebar
st.markdown(
    """
    <style>
        [data-testid="stSidebar"] {
            min-width: 350px;
            max-width: 350px;
        }
    </style>
    """,
    unsafe_allow_html=True
)

ms = st.session_state

if "themes" not in ms:
    ms.themes = {
        "current_theme": "light",
        "refreshed": True,
        "light": {
            "theme.base": "light",
            "theme.backgroundColor": "#ffffff",
            "theme.primaryColor": "#000000",
            "theme.secondaryBackgroundColor": "#f5f5f5",
            "theme.textColor": "#0a1464",
            "button_face": "üåô",
            "button_text": "Appuyer pour passer en mode sombre",
        },
        "dark": {
            "theme.base": "dark",
            "theme.backgroundColor": "#0e0e0e",
            "theme.primaryColor": "#c98bdb",
            "theme.secondaryBackgroundColor": "#2b2b2b",
            "theme.textColor": "white",
            "button_face": "‚òÄÔ∏è",
            "button_text": "Appuyer pour passer en mode clair",
        },
    }


def change_theme():
    current_theme = ms.themes["current_theme"]
    new_theme = "dark" if current_theme == "light" else "light"
    ms.themes["current_theme"] = new_theme

    for key, value in ms.themes[new_theme].items():
        if key.startswith("theme"):
            st._config.set_option(key, value)

    ms.themes["refreshed"] = False


current_theme_config = ms.themes[ms.themes["current_theme"]]
btn_face = current_theme_config["button_face"]
btn_text = current_theme_config["button_text"]

# Sidebar : Nom + Th√®me + Options
st.sidebar.markdown("R√©alis√© par **Yanis Zedira et Aymen Djerad**")
st.sidebar.title("D√©tection de la Malaria")
st.sidebar.button(f"{btn_face} {btn_text}", on_click=change_theme)

if ms.themes["refreshed"] == False:
    ms.themes["refreshed"] = True
    st.rerun()

st.sidebar.write(f"Mode actuel : **{ms.themes['current_theme'].capitalize()}**")


# T√©l√©chargement du mod√®le depuis Google Drive
@st.cache_resource
def load_cnn_model():
    model_path = "CNN_best.keras"

    if not os.path.exists(model_path):
        st.write("üì• T√©l√©chargement du mod√®le depuis Google Drive...")
        url = 'https://drive.google.com/uc?id=1S-_M7q4LfaOpqPaHnNfCxCI7ypnYX8Nd'
        gdown.download(url, model_path, quiet=False)

    model = load_model(model_path)
    return model


model = load_cnn_model()


def predict(image_path, model, threshold=0.5):
    img = image.load_img(image_path, target_size=(64, 64))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)[0][0]
    return prediction <= threshold


@st.cache_resource
def load_test_images():
    test_images = []
    test_images_dir = "images/"
    for img_name in os.listdir(test_images_dir):
        if img_name.endswith(('.png', '.jpg', '.jpeg')):
            test_images.append(os.path.join(test_images_dir, img_name))

    random.shuffle(test_images)

    return test_images


test_images = load_test_images()

st.sidebar.title("Options")
app_mode = st.sidebar.selectbox(
    "Que souhaitez-vous faire ?",
    ["Tester une Image", "En savoir plus sur le projet"]
)

if app_mode == "Tester une Image":
    st.title("Tester une Image")

    uploaded_file = st.file_uploader("T√©l√©chargez une image de cellule sanguine", type=["png", "jpg", "jpeg"])
    selected_test_image = st.selectbox("Ou s√©lectionnez une image dans la base de donn√©e", test_images)

    if uploaded_file is not None:
        img = Image.open(uploaded_file)
        st.image(img, caption="Image t√©l√©charg√©e", width=200)
        img_path = uploaded_file
    else:
        img = Image.open(selected_test_image)
        st.image(img, caption="", width=200)
        img_path = selected_test_image

    if st.button("Analyser l'Image"):
        with st.spinner("üß™ Analyse en cours..."):
            is_infected = predict(img_path, model)

        if is_infected:
            st.error("**R√©sultat : Infect√©**")
        else:
            st.success("**R√©sultat : Non Infect√©**")

elif app_mode == "En savoir plus sur le projet":
    st.title("En savoir plus sur le projet")
    st.markdown("""
    Ce projet est n√© d‚Äôun constat simple : d√©tecter la malaria √† partir d‚Äôimages microscopiques de frottis sanguins est une t√¢che complexe qui demande une grande expertise. 
    Face √† cette difficult√©, j‚Äôai choisi de concevoir de A √† Z un r√©seau de neurones convolutionnel (CNN), sans utiliser de mod√®le pr√©entra√Æn√©, dans le but d‚Äôautomatiser cette d√©tection.

    Pourquoi avoir choisi un CNN pr√©cis√©ment ?  
    Parce que les images microscopiques de cellules sont pleines de d√©tails subtils. Il faut souvent l‚Äô≈ìil aiguis√© d‚Äôun sp√©cialiste pour rep√©rer les anomalies li√©es √† la pr√©sence d‚Äôun parasite. 
    Le CNN est l‚Äôoutil id√©al pour cette t√¢che, car il est capable d‚Äôapprendre √† reconna√Ætre ces motifs complexes tout seul, en analysant des images. 
    Il n‚Äôa pas besoin qu‚Äôon lui explique quoi chercher : il va d√©couvrir, au fil de l‚Äôentra√Ænement, quelles formes et quelles textures sont caract√©ristiques d‚Äôune cellule saine ou infect√©e.

    Le mod√®le que j‚Äôai con√ßu repose sur une architecture classique de CNN avec des couches de convolution, des op√©rations de pooling, de la normalisation, et des couches denses pour la classification finale. 
    Il a √©t√© entra√Æn√© sur un ensemble de donn√©es d‚Äôimages de cellules saines et infect√©es, avec des techniques d‚Äôaugmentation pour √©viter le surapprentissage.

    Ce syst√®me pourrait servir d‚Äôoutil d‚Äôassistance au diagnostic dans des zones o√π l‚Äôacc√®s √† des experts est limit√©.
    """)

# Footer sur chaque page
st.markdown(
    """
    <hr style="border:1px solid #f0f0f0; margin-top: 40px; margin-bottom: 10px;">
    <div style="text-align: center; font-size: 14px;">
        R√©alis√© par <strong>Yanis Zedira et Aymen Djerad</strong>
    </div>
    """,
    unsafe_allow_html=True,
)
